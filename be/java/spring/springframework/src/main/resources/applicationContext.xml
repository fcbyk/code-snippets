<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- bean标签标示配置bean
    	 id属性标示给bean起名字
    	 class属性表示给bean定义类型
    	 name属性定义别名
    	 scope属性配置bean作用范围（单例和非单例）
    	 init-method 属性指定生命周期函数（bean创建之后）
    	 destroy-method 属性指定生命周期函数（bean销毁之前）,scope改成单例才执行
    	 autowire 属性表示自动装配类型
    	 factory-method 属性表示bean工厂方法（静态工厂或实例工厂）
    	 factory-bean 属性表示实例工厂的bean
    	 lazy-init 属性控制bean延迟加载
    	 -->
    <!--  bean实例化  -->
    <!--  实例化bean的三种方式，构造方法,静态工厂和实例工厂  -->

    <!--  构造方法实例化  -->
    <!--  能访问到类中的私有构造方法,显而易见Spring底层用的是反射  -->
    <bean id="book"
          name="book1,book2"
          class="com.fcbyk.springframework.bean.Book"
          init-method="init"
          destroy-method="destroy"
    />

    <!--  静态工厂实例化  -->
    <bean id="myOrder" class="com.fcbyk.springframework.factory.MyOrderFactory" factory-method="getOrder" />

    <!--  DI依赖注入  -->
    <!--  向一个类中传递数据的方式有，普通方法(set方法)，构造方法，所以有两种注入方式  -->
    <!--  依赖注入描述了在容器中建立bean与bean之间的依赖关系的过程  -->
    <!--  注入的类型可分为简单类型和引用类型  -->
    <!--  使用autowire属性，可选择按类型（常用）、按名称、按构造方法完成自动装配  -->
    <bean id="DI" class="com.fcbyk.springframework.bean.DI">

        <!--  构造器注入简单类型数据  -->
        <constructor-arg name="addr" value="青青草原"/>
        <constructor-arg name="age" value="16"/>

        <!--  setter注入引用类型数据  -->
        <property name="book" ref="book"/>
        <property name="order" ref="myOrder"/>

        <!--  setter注入简单类型数据  -->
        <property name="name" value="张三"/>
        <property name="phone" value="123456"/>

        <!--  setter注入集合  -->
        <!--  集合中既可以装简单数据类型也可以装引用数据类型  -->
        <!--  property标签表示setter方式注入，构造方式注入constructor-arg标签内部也可以写<array>、<list>、<set>、<map>、<props>标签  -->

        <!--  注入数组类型数据  -->
        <property name="array">
            <array>
                <value>100</value>
                <value>200</value>
                <value>300</value>
            </array>
        </property>

        <!--  注入List类型数据  -->
        <property name="list">
            <list>
                <value>itcast</value>
                <value>itheima</value>
                <value>boxuegu</value>
                <value>chuanzhihui</value>
            </list>
        </property>

        <!--  注入Set类型数据  -->
        <property name="set">
            <set>
                <value>itcast</value>
                <value>itheima</value>
                <value>boxuegu</value>
                <value>boxuegu</value>
            </set>
        </property>

        <!--  注入Map类型数据  -->
        <property name="map">
            <map>
                <entry key="country" value="china"/>
                <entry key="province" value="henan"/>
                <entry key="city" value="kaifeng"/>
            </map>
        </property>

        <!--  注入Properties类型数据  -->
        <property name="properties">
            <props>
                <prop key="country">china</prop>
                <prop key="province">henan</prop>
                <prop key="city">kaifeng</prop>
            </props>
        </property>

    </bean>

    <!--  在配置文件中使用context命名空间下的标签来加载properties配置文件  -->
    <context:property-placeholder location="jdbc.properties"/>

    <!-- IOC/DI配置管理第三方bean -->
    <!-- 管理DruidDataSource对象 -->
    <!-- 使用${key}来读取properties配置文件中的内容并完成属性注入 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 配置Spring的注解包扫描 -->
    <context:component-scan base-package="com.fcbyk.springframework.bean"/>

</beans>